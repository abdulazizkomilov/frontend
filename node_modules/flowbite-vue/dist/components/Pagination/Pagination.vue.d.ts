import type { PropType } from 'vue';
import type { PaginationLayout } from '../../components/Pagination/types';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    totalPages: {
        type: NumberConstructor;
        default: number;
    };
    perPage: {
        type: NumberConstructor;
        default: number;
    };
    totalItems: {
        type: NumberConstructor;
        required: false;
    };
    layout: {
        type: PropType<PaginationLayout>;
        default: string;
    };
    showIcons: {
        type: BooleanConstructor;
        default: boolean;
    };
    sliceLength: {
        type: NumberConstructor;
        default: number;
    };
    previousLabel: {
        type: StringConstructor;
        default: string;
    };
    nextLabel: {
        type: StringConstructor;
        default: string;
    };
}, () => void, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    totalPages: {
        type: NumberConstructor;
        default: number;
    };
    perPage: {
        type: NumberConstructor;
        default: number;
    };
    totalItems: {
        type: NumberConstructor;
        required: false;
    };
    layout: {
        type: PropType<PaginationLayout>;
        default: string;
    };
    showIcons: {
        type: BooleanConstructor;
        default: boolean;
    };
    sliceLength: {
        type: NumberConstructor;
        default: number;
    };
    previousLabel: {
        type: StringConstructor;
        default: string;
    };
    nextLabel: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    modelValue: number;
    totalPages: number;
    perPage: number;
    layout: PaginationLayout;
    showIcons: boolean;
    sliceLength: number;
    previousLabel: string;
    nextLabel: string;
}>;
export default _default;
